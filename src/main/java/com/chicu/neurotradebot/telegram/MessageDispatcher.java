// src/main/java/com/chicu/neurotradebot/telegram/MessageDispatcher.java
package com.chicu.neurotradebot.telegram;

import com.chicu.neurotradebot.telegram.handler.CallbackHandler;
import com.chicu.neurotradebot.telegram.handler.MessageHandler;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class MessageDispatcher {

    // –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –¥–≤–∞ —Ç–∏–ø–∞
    private final List<CallbackHandler> callbackHandlers;
    private final List<MessageHandler> messageHandlers;

    public void dispatch(Update update) {
        // —Å–Ω–∞—á–∞–ª–∞ ‚Äî –∫–æ–ª–ª–±—ç–∫–∏
        if (update.hasCallbackQuery()) {
            String key = update.getCallbackQuery().getData();
            for (CallbackHandler handler : callbackHandlers) {
                if (handler.canHandle(update)) {
                    try {
                        handler.handle(update);
                        log.info("üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω callback '{}', –≤—ã–∑–≤–∞–Ω {}", key, handler.getClass().getSimpleName());
                    } catch (Exception e) {
                        log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {} –≤ {}", key, handler.getClass().getSimpleName(), e);
                    }
                    return;
                }
            }
            log.warn("‚ö†Ô∏è –ù–µ—Ç CallbackHandler –¥–ª—è callback '{}'", key);
            return;
        }

        // –∑–∞—Ç–µ–º ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for (MessageHandler handler : messageHandlers) {
            if (handler.canHandle(update)) {
                try {
                    handler.handle(update);
                } catch (Exception e) {
                    log.error("‚ùå –û—à–∏–±–∫–∞ –≤ MessageHandler {}", handler.getClass().getSimpleName(), e);
                }
                return;
            }
        }

        log.warn("‚ùì –ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è update: {}", update);
    }
}
