// src/main/java/com/chicu/neurotradebot/telegram/handler/ApiSetupMenuDefinition.java
package com.chicu.neurotradebot.telegram.handler;

import com.chicu.neurotradebot.entity.User;
import com.chicu.neurotradebot.entity.UserInputState;
import com.chicu.neurotradebot.service.AiTradeSettingsService;
import com.chicu.neurotradebot.service.ApiCredentialsService;
import com.chicu.neurotradebot.service.UserService;
import com.chicu.neurotradebot.telegram.BotContext;
import com.chicu.neurotradebot.telegram.TelegramSender;
import com.chicu.neurotradebot.view.AiTradeMenuBuilder;
import com.chicu.neurotradebot.view.ManualTradeMenuBuilder;
import com.chicu.neurotradebot.view.NetworkSettingsMenuBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.util.Set;

@Component
@RequiredArgsConstructor
@Slf4j
public class ApiSetupMenuDefinition implements MenuDefinition, TextInputAwareMenu {

    private final UserService userService;
    private final AiTradeSettingsService settingsService;
    private final ApiCredentialsService credentialsService;
    private final TelegramSender sender;
    private final ManualTradeMenuBuilder manualBuilder;
    private final AiTradeMenuBuilder aiBuilder;

    @Override
    public Set<String> keys() {
        return Set.of("api_setup_start");
    }

    @Override
    public String title() {
        return "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π";
    }

    @Override
    public InlineKeyboardMarkup markup(Long chatId) {
        return null;
    }

    @Override
    public void handle(Update update) {
        Long chatId = update.getCallbackQuery().getMessage().getChatId();
        BotContext.setChatId(chatId);
        try {
            User user = userService.getOrCreate(chatId);
            var settings = settingsService.getOrCreate(user);

            if (settings.getExchange() == null) {
                sender.sendMessage(chatId, "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É.");
                return;
            }

            settings.setInputState(UserInputState.WAIT_API_KEY);
            settingsService.save(settings);

            log.info("üì• –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAIT_API_KEY –¥–ª—è chatId={}", chatId);
            sender.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ API Key:");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ ApiSetupMenuDefinition.handle(): {}", e.getMessage(), e);
            sender.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–µ–π.");
        } finally {
            BotContext.clear();
        }
    }

    @Override
    public boolean supports(UserInputState state) {
        return state == UserInputState.WAIT_API_KEY || state == UserInputState.WAIT_API_SECRET;
    }

    @Override
    public void handleText(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) return;

        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText().trim();

        BotContext.setChatId(chatId);
        try {
            User user = userService.getOrCreate(chatId);
            var settings = settingsService.getOrCreate(user);

            String exchange = settings.getExchange();
            boolean testMode = settings.isTestMode();
            UserInputState state = settings.getInputState();

            if (exchange == null) {
                sender.sendMessage(chatId, "‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É.");
                return;
            }

            if (state == UserInputState.WAIT_API_KEY) {
                credentialsService.saveApiKey(user, exchange, testMode, text);
                settings.setInputState(UserInputState.WAIT_API_SECRET);
                settingsService.save(settings);
                sender.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ API Secret:");
                return;
            }

            if (state == UserInputState.WAIT_API_SECRET) {
                credentialsService.saveApiSecret(user, exchange, testMode, text);

                if (!credentialsService.testConnection(user, exchange, testMode)) {
                    sender.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ API Key –∑–∞–Ω–æ–≤–æ:");
                    settings.setInputState(UserInputState.WAIT_API_KEY);
                    settingsService.save(settings);
                    return;
                }

                sender.sendMessage(chatId, "‚úÖ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ.");
                settings.setInputState(UserInputState.NONE);
                settingsService.save(settings);

                if (settings.isAiEnabled()) {
                    sender.sendMessage(chatId, aiBuilder.title(), aiBuilder.build(chatId));
                } else {
                    sender.sendMessage(chatId, manualBuilder.title(), manualBuilder.build(chatId));
                }
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–ª—é—á–∞: {}", e.getMessage(), e);
            sender.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } finally {
            BotContext.clear();
        }
    }
}
