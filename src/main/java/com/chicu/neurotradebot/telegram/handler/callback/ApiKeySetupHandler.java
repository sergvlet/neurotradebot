package com.chicu.neurotradebot.telegram.handler.callback;

import com.chicu.neurotradebot.exchange.core.ExchangeClient;
import com.chicu.neurotradebot.exchange.core.ExchangeRegistry;
import com.chicu.neurotradebot.telegram.handler.menu.StartMenuBuilder;
import com.chicu.neurotradebot.user.entity.ExchangeCredential;
import com.chicu.neurotradebot.user.entity.User;
import com.chicu.neurotradebot.user.enums.ApiKeySetupStage;
import com.chicu.neurotradebot.user.repository.ExchangeCredentialRepository;
import com.chicu.neurotradebot.user.repository.UserRepository;
import com.chicu.neurotradebot.user.service.ApiKeySetupService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.time.LocalDateTime;

@Component
@RequiredArgsConstructor
public class ApiKeySetupHandler {

    private final ApiKeySetupService apiKeySetupService;
    private final ExchangeCredentialRepository credentialRepository;
    private final UserRepository userRepository;
    private final ExchangeRegistry exchangeRegistry;
    private final StartMenuBuilder menuBuilder;

    // –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π ‚Äî –≤—ã–±–æ—Ä –±–∏—Ä–∂–∏
    public SendMessage handle(Update update) {
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        apiKeySetupService.startSetup(chatId);

        return SendMessage.builder()
                .chatId(String.valueOf(chatId))
                .text("""
                      üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–π API.

                      –í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–∏:
                      """)
                .replyMarkup(menuBuilder.buildExchangeSelectionKeyboard())
                .parseMode("Markdown")
                .build();
    }



    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (API –∫–ª—é—á –∏–ª–∏ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á)
    public SendMessage handleApiKeyInput(Update update) {
        Message message = update.getMessage();
        long chatId = message.getChatId();
        String text = message.getText();

        var stage = apiKeySetupService.getUserStage(chatId);

        if (stage == ApiKeySetupStage.ENTER_API_KEY) {
            apiKeySetupService.saveTempApiKey(chatId, text);
            apiKeySetupService.setUserStage(chatId, ApiKeySetupStage.ENTER_SECRET_KEY);

            return SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á* API:")
                    .parseMode("Markdown")
                    .build();

        } else if (stage == ApiKeySetupStage.ENTER_SECRET_KEY) {
            return saveKeysAndCheckConnection(chatId, text, message.getMessageId());
        } else {
            return SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–¥–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
                    .parseMode("Markdown")
                    .build();
        }
    }

    // –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    private SendMessage saveKeysAndCheckConnection(long chatId, String secretKey, Integer messageId) {
        String apiKey = apiKeySetupService.getTempApiKey(chatId);
        String selectedExchange = apiKeySetupService.getSelectedExchange(chatId);
        boolean useTestnet = apiKeySetupService.isUseTestnet(chatId);

        if (apiKey == null || selectedExchange == null) {
            return SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                    .parseMode("Markdown")
                    .build();
        }

        User user = userRepository.findById(chatId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."));

        ExchangeCredential credential = credentialRepository.findByUserIdAndExchange(chatId, selectedExchange)
                .orElseGet(() -> {
                    ExchangeCredential newCredential = new ExchangeCredential();
                    newCredential.setUser(user);
                    newCredential.setExchange(selectedExchange);
                    newCredential.setCreatedAt(LocalDateTime.now());
                    return newCredential;
                });

        credential.setUseTestnet(useTestnet);

        if (useTestnet) {
            credential.setTestApiKey(apiKey);
            credential.setTestSecretKey(secretKey);
        } else {
            credential.setRealApiKey(apiKey);
            credential.setRealSecretKey(secretKey);
        }

        credentialRepository.save(credential);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try {
            ExchangeClient client = exchangeRegistry.getClient(selectedExchange);
            boolean isConnected = client.testConnection(chatId);

            apiKeySetupService.completeSetup(chatId);

            if (!isConnected) {
                return SendMessage.builder()
                        .chatId(String.valueOf(chatId))
                        .text("""
                              ‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.

                              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.
                              """)
                        .replyMarkup(menuBuilder.buildMainMenu())
                        .parseMode("Markdown")
                        .build();
            }

            return SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text("""
                          ‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!

                          –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å. üöÄ
                          """)
                    .replyMarkup(menuBuilder.buildMainMenu())
                    .parseMode("Markdown")
                    .build();

        } catch (Exception e) {
            apiKeySetupService.completeSetup(chatId);
            return SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n" + e.getMessage())
                    .replyMarkup(menuBuilder.buildSettingsMenu())
                    .parseMode("Markdown")
                    .build();
        }
    }
}
