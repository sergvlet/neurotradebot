package com.chicu.neurotradebot.telegram.handler.settings;

import com.chicu.neurotradebot.telegram.handler.exchange.common.ExchangeConnectionService;
import com.chicu.neurotradebot.telegram.handler.menu.SettingsMenuBuilder;
import com.chicu.neurotradebot.telegram.handler.trade.ai.AITradeMenuHandler;
import com.chicu.neurotradebot.telegram.session.TradeMode;
import com.chicu.neurotradebot.telegram.session.UserSessionManager;
import com.chicu.neurotradebot.user.repository.ExchangeCredentialRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;

@Component
@RequiredArgsConstructor
public class SettingsMenuHandler {

    private final SettingsMenuBuilder settingsMenuBuilder;
    private final ExchangeCredentialRepository credentialRepository;
    private final ExchangeConnectionService exchangeConnectionService;
    private final AITradeMenuHandler aiTradeMenuHandler;

    public Object handle(Update update) {
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        Integer messageId = update.getCallbackQuery().getMessage().getMessageId();
        String data = update.getCallbackQuery().getData();

        if ("switch_mode".equals(data)) {
            UserSessionManager.toggleTestnet(chatId);
        }

        if ("select_manual_mode".equals(data)) {
            UserSessionManager.setTradeMode(chatId, TradeMode.MANUAL);
            return checkConnectionAndProceed(update, chatId);
        }

        if ("select_ai_mode".equals(data)) {
            UserSessionManager.setTradeMode(chatId, TradeMode.AI);
            return checkConnectionAndProceed(update, chatId);
        }

        boolean isTestnet = UserSessionManager.isTestnet(chatId);
        String network = isTestnet ? "Test (—Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Ç—å)" : "Real (—Ä–µ–∞–ª—å–Ω–∞—è —Å–µ—Ç—å)";
        String exchange = UserSessionManager.getSelectedExchange(chatId);

        return EditMessageText.builder()
                .chatId(String.valueOf(chatId))
                .messageId(messageId)
                .text(String.format("""
                        ‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:*

                        –°–µ—Ç—å: *%s*
                        –ë–∏—Ä–∂–∞: *%s*

                        –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                        """, network, exchange))
                .replyMarkup(settingsMenuBuilder.buildSettingsMenu())
                .parseMode("Markdown")
                .build();
    }

    private Object checkConnectionAndProceed(Update update, Long chatId) {
        String exchange = UserSessionManager.getSelectedExchange(chatId);
        boolean useTestnet = UserSessionManager.isTestnet(chatId);

        if (exchange == null || exchange.isEmpty() || "–ù–µ –≤—ã–±—Ä–∞–Ω–∞".equals(exchange)) {
            return EditMessageText.builder()
                    .chatId(String.valueOf(chatId))
                    .messageId(update.getCallbackQuery().getMessage().getMessageId())
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –±–∏—Ä–∂–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏.")
                    .replyMarkup(settingsMenuBuilder.buildSettingsMenu())
                    .parseMode("Markdown")
                    .build();
        }

        var credentialOpt = credentialRepository.findByUserIdAndExchange(chatId, exchange);
        if (credentialOpt.isEmpty()) {
            return EditMessageText.builder()
                    .chatId(String.valueOf(chatId))
                    .messageId(update.getCallbackQuery().getMessage().getMessageId())
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞: API-–∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
                    .replyMarkup(settingsMenuBuilder.buildSettingsMenu())
                    .parseMode("Markdown")
                    .build();
        }

        var credential = credentialOpt.get();
        boolean keysExist = useTestnet
                ? credential.getTestApiKey() != null && credential.getTestSecretKey() != null
                : credential.getRealApiKey() != null && credential.getRealSecretKey() != null;

        if (!keysExist) {
            return EditMessageText.builder()
                    .chatId(String.valueOf(chatId))
                    .messageId(update.getCallbackQuery().getMessage().getMessageId())
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
                    .replyMarkup(settingsMenuBuilder.buildSettingsMenu())
                    .parseMode("Markdown")
                    .build();
        }

        boolean connectionSuccessful = exchangeConnectionService.testConnection(
                exchange,
                useTestnet ? credential.getTestApiKey() : credential.getRealApiKey(),
                useTestnet ? credential.getTestSecretKey() : credential.getRealSecretKey(),
                useTestnet
        );

        if (!connectionSuccessful) {
            return EditMessageText.builder()
                    .chatId(String.valueOf(chatId))
                    .messageId(update.getCallbackQuery().getMessage().getMessageId())
                    .text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∏—Ä–∂–µ–π.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ API-–∫–ª—é—á–∏.")
                    .replyMarkup(settingsMenuBuilder.buildSettingsMenu())
                    .parseMode("Markdown")
                    .build();
        }

        TradeMode mode = UserSessionManager.getTradeMode(chatId);

        if (mode == TradeMode.MANUAL) {
            return EditMessageText.builder()
                    .chatId(String.valueOf(chatId))
                    .messageId(update.getCallbackQuery().getMessage().getMessageId())
                    .text("üßë‚Äçüíª *–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤—ã–±—Ä–∞–Ω: –†—É—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è*.\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ–Ω—é.")
                    .parseMode("Markdown")
                    .build();
        } else {
            return aiTradeMenuHandler.showMainMenu(update);
        }
    }
}
