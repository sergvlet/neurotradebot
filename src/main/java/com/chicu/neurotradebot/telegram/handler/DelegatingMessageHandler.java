package com.chicu.neurotradebot.telegram.handler;

import com.chicu.neurotradebot.entity.User;
import com.chicu.neurotradebot.entity.UserInputState;
import com.chicu.neurotradebot.service.AiTradeSettingsService;
import com.chicu.neurotradebot.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.List;

@Component
@RequiredArgsConstructor
@Slf4j
public class DelegatingMessageHandler implements MessageHandler {

    private final List<TextInputAwareMenu> textInputMenus;
    private final UserService userService;
    private final AiTradeSettingsService settingsService;

    @Override
    public boolean canHandle(Update update) {
        return update.hasMessage() && update.getMessage().hasText();
    }

    @Override
    public void handle(Update update) {
        Long chatId = update.getMessage().getChatId();
        User user = userService.getOrCreate(chatId);
        var settings = settingsService.getOrCreate(user);
        UserInputState state = settings.getInputState();

        log.info("üì• –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç chatId={} | state={}", chatId, state);

        if (state == null || state == UserInputState.NONE) {
            log.info("‚ÑπÔ∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è (state: {})", state);
            return;
        }

        textInputMenus.stream()
                .filter(menu -> menu.supports(state))
                .findFirst()
                .ifPresentOrElse(
                        menu -> {
                            log.info("‚úâÔ∏è –î–µ–ª–µ–≥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤ {}", menu.getClass().getSimpleName());
                            menu.handleText(update);
                        },
                        () -> log.warn("‚ùå –ù–µ—Ç –º–µ–Ω—é, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞: {}", state)
                );
    }
}
