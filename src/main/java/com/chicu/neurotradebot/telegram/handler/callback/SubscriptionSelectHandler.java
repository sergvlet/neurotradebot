package com.chicu.neurotradebot.telegram.handler.callback;

import com.chicu.neurotradebot.subscription.entity.Subscription;
import com.chicu.neurotradebot.subscription.entity.SubscriptionStatus;
import com.chicu.neurotradebot.subscription.repository.SubscriptionRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.format.DateTimeFormatter;
import java.util.List;

@Component
@RequiredArgsConstructor
public class SubscriptionSelectHandler {

    private final SubscriptionRepository subscriptionRepository;

    public EditMessageText handle(long chatId, Integer messageId) {
        var activeSubscriptions = subscriptionRepository.findAllByUserIdAndStatus(chatId, SubscriptionStatus.ACTIVE);

        String text;
        InlineKeyboardMarkup markup;

        if (!activeSubscriptions.isEmpty() && activeSubscriptions.get(0).getEndDate().isAfter(java.time.LocalDateTime.now())) {
            Subscription subscription = activeSubscriptions.get(0);
            String planName = getPlanName(subscription.getPlan());
            String endDate = subscription.getEndDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));

            text = String.format("""
                    üé´ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:
                    
                    –¢–∏–ø: *%s*
                    –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: *%s*
                    
                    –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. ‚¨áÔ∏è
                    """, planName, endDate);

            InlineKeyboardButton renewButton = InlineKeyboardButton.builder()
                    .text("ü™ô –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
                    .callbackData("RENEW_SUBSCRIPTION")
                    .build();

            markup = InlineKeyboardMarkup.builder()
                    .keyboard(List.of(
                            List.of(renewButton)
                    ))
                    .build();

        } else {
            text = "üé´ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:";

            InlineKeyboardButton trialButton = InlineKeyboardButton.builder()
                    .text("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (7 –¥–Ω–µ–π)")
                    .callbackData("TRIAL_SUBSCRIPTION")
                    .build();

            InlineKeyboardButton paidButton = InlineKeyboardButton.builder()
                    .text("ü™ô –ü–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏")
                    .callbackData("PAID_SUBSCRIPTION")
                    .build();

            InlineKeyboardButton laterButton = InlineKeyboardButton.builder()
                    .text("‚è≥ –í—ã–±—Ä–∞—Ç—å –ø–æ–∑–∂–µ")
                    .callbackData("CHOOSE_LATER")
                    .build();

            markup = InlineKeyboardMarkup.builder()
                    .keyboard(List.of(
                            List.of(trialButton),
                            List.of(paidButton),
                            List.of(laterButton)
                    ))
                    .build();
        }

        return EditMessageText.builder()
                .chatId(String.valueOf(chatId))
                .messageId(messageId)
                .text(text)
                .replyMarkup(markup)
                .parseMode("Markdown")
                .build();
    }

    private String getPlanName(Subscription.PlanType plan) {
        return switch (plan) {
            case FREE_TRIAL -> "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (7 –¥–Ω–µ–π)";
            case MONTHLY -> "–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (1 –º–µ—Å—è—Ü)";
            case QUARTERLY -> "–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (3 –º–µ—Å—è—Ü–∞)";
            case HALF_YEAR -> "–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (6 –º–µ—Å—è—Ü–µ–≤)";
            case YEARLY -> "–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (12 –º–µ—Å—è—Ü–µ–≤)";
        };
    }
}
