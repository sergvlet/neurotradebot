package com.chicu.neurotradebot.telegram.handler.callback;

import com.chicu.neurotradebot.exchange.core.ExchangeClient;
import com.chicu.neurotradebot.exchange.core.ExchangeRegistry;
import com.chicu.neurotradebot.telegram.handler.menu.StartMenuBuilder;
import com.chicu.neurotradebot.user.entity.ExchangeCredential;
import com.chicu.neurotradebot.user.entity.ExchangeSettings;
import com.chicu.neurotradebot.user.entity.User;
import com.chicu.neurotradebot.user.enums.ApiKeySetupStage;
import com.chicu.neurotradebot.user.repository.ExchangeCredentialRepository;
import com.chicu.neurotradebot.user.repository.ExchangeSettingsRepository;
import com.chicu.neurotradebot.user.repository.UserRepository;
import com.chicu.neurotradebot.user.service.ApiKeySetupService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.time.LocalDateTime;

@Slf4j
@Component
@RequiredArgsConstructor
public class ApiKeySetupFlowHandler {

    private final ApiKeySetupService apiKeySetupService;
    private final ExchangeCredentialRepository credentialRepository;
    private final UserRepository userRepository;
    private final ExchangeRegistry exchangeRegistry;
    private final StartMenuBuilder menuBuilder;
    private final ExchangeSettingsRepository settingsRepository;

    public BotApiMethod<?> handle(Update update) {
        Message message = update.getMessage();
        long chatId = message.getChatId();
        Integer messageId = message.getMessageId();
        String text = message.getText();

        ApiKeySetupStage stage = apiKeySetupService.getUserStage(chatId);

        if (stage == ApiKeySetupStage.ENTER_API_KEY) {
            apiKeySetupService.saveTempApiKey(chatId, text);
            apiKeySetupService.setUserStage(chatId, ApiKeySetupStage.ENTER_SECRET_KEY);

            log.info("[{}] API KEY —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –æ–∂–∏–¥–∞–µ–º SECRET KEY", chatId);

            return SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text("""
                          üîí –û—Ç–ª–∏—á–Ω–æ!

                          –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à *SECRET KEY* (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
                          """)
                    .parseMode("Markdown")
                    .build();
        } else if (stage == ApiKeySetupStage.ENTER_SECRET_KEY) {
            String apiKey = apiKeySetupService.getTempApiKey(chatId);
            String selectedExchange = apiKeySetupService.getSelectedExchange(chatId);

            if (apiKey == null || selectedExchange == null) {
                log.warn("[{}] –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–π", chatId);
                return SendMessage.builder()
                        .chatId(String.valueOf(chatId))
                        .text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–∞–Ω–æ–≤–æ.")
                        .parseMode("Markdown")
                        .build();
            }

            User user = userRepository.findById(chatId)
                    .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."));

            ExchangeCredential credential = credentialRepository.findByUserIdAndExchange(user.getId(), selectedExchange)
                    .orElseGet(() -> {
                        ExchangeCredential newCredential = new ExchangeCredential();
                        newCredential.setUser(user);
                        newCredential.setExchange(selectedExchange);
                        newCredential.setCreatedAt(LocalDateTime.now());
                        return newCredential;
                    });

            boolean useTestnet = settingsRepository.findByUserIdAndExchange(chatId, selectedExchange)
                    .map(ExchangeSettings::getUseTestnet)
                    .orElse(true);

            if (useTestnet) {
                credential.setTestApiKey(apiKey);
                credential.setTestSecretKey(text);
                log.info("[{}] –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ TESTNET", chatId);
            } else {
                credential.setRealApiKey(apiKey);
                credential.setRealSecretKey(text);
                log.info("[{}] –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏ –≤ REAL", chatId);
            }

            credentialRepository.save(credential);

            try {
                ExchangeClient client = exchangeRegistry.getClient(selectedExchange);
                boolean isConnected = client.testConnection(chatId);

                apiKeySetupService.completeSetup(chatId);

                if (!isConnected) {
                    log.warn("[{}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å", chatId);
                    return EditMessageText.builder()
                            .chatId(String.valueOf(chatId))
                            .messageId(messageId)
                            .text("""
                                  ‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.

                                  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π.
                                  """)
                            .parseMode("Markdown")
                            .replyMarkup(menuBuilder.buildMainMenu())
                            .build();
                }

                log.info("[{}] –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", chatId);
                return EditMessageText.builder()
                        .chatId(String.valueOf(chatId))
                        .messageId(messageId)
                        .text("""
                              ‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!

                              –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å. üöÄ
                              """)
                        .parseMode("Markdown")
                        .replyMarkup(menuBuilder.buildMainMenu())
                        .build();
            } catch (Exception e) {
                apiKeySetupService.completeSetup(chatId);
                log.error("[{}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {}", chatId, e.getMessage(), e);
                return EditMessageText.builder()
                        .chatId(String.valueOf(chatId))
                        .messageId(messageId)
                        .text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: " + e.getMessage())
                        .parseMode("Markdown")
                        .replyMarkup(menuBuilder.buildMainMenu())
                        .build();
            }
        } else {
            return SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–¥–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                    .parseMode("Markdown")
                    .build();
        }
    }
}
