package com.chicu.neurotradebot.telegram.util;

import com.chicu.neurotradebot.ai.strategy.AvailableStrategy;
import com.chicu.neurotradebot.ai.strategy.config.AdxConfig;
import com.chicu.neurotradebot.ai.strategy.config.StrategyConfig;
import com.chicu.neurotradebot.telegram.callback.BotCallback;
import com.chicu.neurotradebot.trade.enums.TradeMode;
import com.chicu.neurotradebot.trade.enums.TradeType;
import com.chicu.neurotradebot.trade.service.UserSettingsService;
import com.chicu.neurotradebot.trade.service.UserStrategyConfigService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@Service
@RequiredArgsConstructor
public class KeyboardService {

    private final UserSettingsService userSettingsService;
    private final UserStrategyConfigService userStrategyConfigService; // –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å

    public InlineKeyboardMarkup getMainMenu(Long chatId) {
        return buildKeyboard(List.of(
                List.of(createButton("üöÄ –ù–∞—á–∞—Ç—å", BotCallback.TRADING_MENU.getValue())),  // –ö–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–æ–µ –º–µ–Ω—é
                List.of(createButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", BotCallback.SUBSCRIBE.getValue())),
                List.of(createButton("ü§ñ –û –±–æ—Ç–µ", BotCallback.BOT_INFO.getValue()))
        ));
    }

    public InlineKeyboardMarkup getTradingMenuByMode(Long chatId) {
        TradeType type = userSettingsService.getTradeType(chatId);
        return type == TradeType.MANUAL ? getManualTradingMenu(chatId) : getTradingMenu(chatId);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ getTradingMenu
    public InlineKeyboardMarkup getTradingMenu(Long chatId) {
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
        buttons.add(List.of(createButton("üîÑ –í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏", BotCallback.SET_TRADE_TYPE.getValue())));

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è
        buttons.add(List.of(
                createButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", BotCallback.STATISTICS.getValue()),
                createButton("üìâ –ò—Å—Ç–æ—Ä–∏—è", BotCallback.HISTORY.getValue())
        ));

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É AI –∏ —Ä—É—á–Ω—ã–º —Ä–µ–∂–∏–º–∞–º–∏
        TradeType current = userSettingsService.getTradeType(chatId);
        buttons.add(List.of(
                createButton((current == TradeType.AI ? "‚úÖ " : "‚òëÔ∏è ") + "ü§ñ AI-—Ä–µ–∂–∏–º", BotCallback.SET_TRADE_TYPE.getValue() + ":AI"),
                createButton((current == TradeType.MANUAL ? "‚úÖ " : "‚òëÔ∏è ") + "üßë‚Äçüíº –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º", BotCallback.SET_TRADE_TYPE.getValue() + ":MANUAL")
        ));

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.add(List.of(createButton("üîô –ù–∞–∑–∞–¥", BotCallback.MAIN_MENU.getValue())));

        return buildKeyboard(buttons);
    }

    public InlineKeyboardMarkup getManualTradingMenu(Long chatId) {
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();
        buttons.add(List.of(createButton("üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", BotCallback.MANUAL_TRADE_EXECUTE.getValue())));
        buttons.add(List.of(
                createButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", BotCallback.MANUAL_TRADE_STATS.getValue()),
                createButton("üìâ –ò—Å—Ç–æ—Ä–∏—è", BotCallback.MANUAL_TRADE_HISTORY.getValue())
        ));
        buttons.add(List.of(createButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", BotCallback.MANUAL_TRADE_SETTINGS.getValue())));
        buttons.add(List.of(createButton("üîô –ù–∞–∑–∞–¥", BotCallback.START_TRADE.getValue())));
        return buildKeyboard(buttons);
    }

    public InlineKeyboardMarkup getManualTradeSettingsMenu(Long chatId) {
        var settings = userSettingsService.getOrCreate(chatId);
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();
        buttons.add(List.of(createButton("üß† –°—Ç—Ä–∞—Ç–µ–≥–∏–∏", BotCallback.STRATEGY_MENU.getValue())));
        buttons.add(List.of(createButton("üß™ –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏", BotCallback.SELECT_MODE.getValue())));
        buttons.add(List.of(createButton("üíµ –õ–∏–º–∏—Ç —Å–¥–µ–ª–∫–∏", BotCallback.TRADE_LIMIT.getValue())));
        buttons.add(List.of(createButton("üìä –ü–∞—Ä–∞: " + settings.getExchangeSymbol(), BotCallback.SYMBOL_MENU.getValue())));
        buttons.add(List.of(createButton("‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: " + settings.getTimeframe(), BotCallback.TIMEFRAME_MENU.getValue())));
        buttons.add(List.of(createButton("üìà –ë–∏—Ä–∂–∞", BotCallback.EXCHANGE_MENU.getValue())));
        buttons.add(List.of(createButton("üí∞ –ë–∞–ª–∞–Ω—Å", BotCallback.SHOW_BALANCE.getValue())));
        buttons.add(List.of(createButton("üîô –ù–∞–∑–∞–¥", BotCallback.START_TRADE.getValue())));
        return buildKeyboard(buttons);
    }

    public InlineKeyboardMarkup getStrategySelectionMenu(Set<AvailableStrategy> selected) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (AvailableStrategy strategy : AvailableStrategy.values()) {
            boolean isSelected = selected.contains(strategy);
            String prefix = isSelected ? "‚úÖ " : "‚òëÔ∏è ";
            String text = prefix + strategy.getTitle();
            String callback = BotCallback.TOGGLE_STRATEGY.getValue() + ":" + strategy.name();
            rows.add(List.of(createButton(text, callback)));
        }
        return appendBackButton(rows);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    public InlineKeyboardMarkup getModeSelectionMenu(Long chatId, TradeMode selected) {
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏
        for (TradeMode mode : TradeMode.values()) {
            String prefix = mode == selected ? "‚úÖ " : "‚òëÔ∏è ";
            String text = prefix + mode.getTitle();
            String callback = BotCallback.TOGGLE_MODE.getValue() + ":" + mode.name();
            buttons.add(List.of(createButton(text, callback)));
        }

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        buttons.add(List.of(createButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", BotCallback.SHOW_STRATEGY_GRAPH.getValue())));

        return appendBackButton(buttons);  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    }

    public InlineKeyboardMarkup getStrategyConfigMenu(Long chatId, String strategyName, StrategyConfig config) {
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        // –ü—Ä–∏–º–µ—Ä –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Adx
        if ("Adx".equals(strategyName)) {
            AdxConfig adxConfig = (AdxConfig) config;
            buttons.add(List.of(createButton("–ü–µ—Ä–∏–æ–¥: " + adxConfig.getPeriod(), BotCallback.CONFIG_UPDATE.getValue() + ":Adx:period")));
            buttons.add(List.of(createButton("–ü–æ—Ä–æ–≥ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞: " + adxConfig.getTrendStrengthThreshold(), BotCallback.CONFIG_UPDATE.getValue() + ":Adx:trendStrengthThreshold")));
        }

        // –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        buttons.add(List.of(createButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", BotCallback.RESET_CONFIG.getValue() + ":" + strategyName)));

        return appendBackButton(buttons);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∏—Ä–∂–∏
    public InlineKeyboardMarkup getExchangeSelectionMenu() {
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        // –ü–µ—Ä–µ—á–µ–Ω—å –±–∏—Ä–∂, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        List<String> exchanges = List.of("BINANCE", "BYBIT", "KUCOIN");

        for (String exchange : exchanges) {
            buttons.add(List.of(createButton("üìà " + exchange, BotCallback.SET_EXCHANGE.getValue() + ":" + exchange)));
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        return appendBackButton(buttons);
    }

    public InlineKeyboardMarkup getTimeframeSelectionMenu() {
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        // –°–ø–∏—Å–æ–∫ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        List<String> timeframes = List.of("1m", "5m", "15m", "1h", "4h", "1d");

        // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        for (String tf : timeframes) {
            buttons.add(List.of(createButton(tf, BotCallback.SET_TIMEFRAME.getValue() + ":" + tf)));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        return appendBackButton(buttons);
    }

    public InlineKeyboardMarkup getSymbolSelectionMenu() {
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        List<String> symbols = List.of("BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT");

        // –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for (String symbol : symbols) {
            buttons.add(List.of(createButton(symbol, BotCallback.SET_SYMBOL.getValue() + ":" + symbol)));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        return appendBackButton(buttons);
    }

    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    public InlineKeyboardMarkup appendBackButton(List<List<InlineKeyboardButton>> buttons) {
        buttons.add(List.of(createButton("üîô –ù–∞–∑–∞–¥", BotCallback.BACK.getValue())));
        return buildKeyboard(buttons);
    }

    public InlineKeyboardMarkup buildKeyboard(List<List<InlineKeyboardButton>> buttons) {
        return InlineKeyboardMarkup.builder().keyboard(buttons).build();
    }

    public InlineKeyboardButton createButton(String text, String callbackData) {
        return InlineKeyboardButton.builder()
                .text(text)
                .callbackData(callbackData)
                .build();
    }
}
