package com.chicu.neurotradebot.telegram.callback;

import com.chicu.neurotradebot.telegram.util.MessageUtils;
import com.chicu.neurotradebot.trade.enums.Exchange;
import com.chicu.neurotradebot.trade.service.UserApiKeysService;
import com.chicu.neurotradebot.trade.service.UserSettingsService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.bots.AbsSender;

@Component
@RequiredArgsConstructor
public class ApiKeyInputProcessor {

    private final UserSettingsService settingsService;
    private final UserApiKeysService apiKeysService;
    private final MessageUtils messageUtils;
    private final ExchangeMenuCallback exchangeMenuCallback;

    public void process(Message message, AbsSender sender) {
        Long chatId = message.getChatId();
        String text = message.getText();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞
        String waiting = settingsService.getWaitingFor(chatId);
        if (waiting == null || !waiting.startsWith("API_KEY_")) return;

        // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        String[] parts = waiting.split(":");
        if (parts.length < 2) return;

        String mode = parts[0];  // API_KEY_TEST –∏–ª–∏ API_KEY_REAL –∏–ª–∏ API_KEY_TEST_SECRET –∏ —Ç.–¥.
        Exchange exchange = Exchange.valueOf(parts[1]);

        if (!mode.endsWith("_SECRET")) {
            // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ API Key ‚Äî —Ç–µ–ø–µ—Ä—å –∂–¥–µ–º Secret Key
            settingsService.setTemp(chatId, "API_KEY", text);
            settingsService.setWaitingForInput(chatId, mode + "_SECRET:" + exchange.name());

            messageUtils.sendMessage(chatId,
                    "üõ° –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ Secret Key –¥–ª—è " + exchange +
                            (mode.contains("TEST") ? " (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º):" : " (—Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º):"),
                    sender);
        } else {
            // –ü–æ–ª—É—á–µ–Ω Secret Key ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ –∫–ª—é—á–∞
            String apiKey = settingsService.getTemp(chatId, "API_KEY");

            // –ü–æ–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–ª—é—á–µ–π
            if (mode.startsWith("API_KEY_TEST")) {
                apiKeysService.saveTestKeys(chatId, exchange, apiKey, text);
            } else {
                apiKeysService.saveRealKeys(chatId, exchange, apiKey, text);
            }

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            settingsService.clearWaiting(chatId);
            settingsService.clearTemp(chatId, "API_KEY");

            messageUtils.sendMessage(chatId,
                    "‚úÖ –ö–ª—é—á–∏ –¥–ª—è " + exchange + " —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∏—Ä–∂–∏.",
                    sender);

            // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–∏—Ä–∂–∏
            exchangeMenuCallback.process(chatId, null, BotCallback.EXCHANGE_MENU.getValue(), sender);
        }
    }
}
