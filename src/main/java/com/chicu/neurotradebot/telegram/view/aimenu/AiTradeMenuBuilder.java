package com.chicu.neurotradebot.telegram.view.aimenu;

import com.chicu.neurotradebot.entity.AiTradeSettings;
import com.chicu.neurotradebot.service.AiTradeSettingsService;
import com.chicu.neurotradebot.telegram.handler.MenuDefinition;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@Component
@RequiredArgsConstructor
public class AiTradeMenuBuilder implements MenuDefinition {

    private final AiTradeSettingsService settingsService;

    @Override
    public Set<String> keys() {
        return Set.of("ai_control");
    }

    @Override
    public String title() {
        return "ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI-—Ä–µ–∂–∏–º–∞";
    }

    @Override
    public InlineKeyboardMarkup markup(Long chatId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        AiTradeSettings settings = settingsService.getForCurrentUser();
        boolean enabled = settings.isEnabled();

        // –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        var toggleAi   = InlineKeyboardButton.builder().text("ü§ñ –í–∫–ª/–í—ã–∫–ª AI-—Ä–µ–∂–∏–º").callbackData("toggle_ai").build();
        var tradeMode  = InlineKeyboardButton.builder().text("üîÄ –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏").callbackData("ai_trade_mode").build();
        var pairs      = InlineKeyboardButton.builder().text("üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã").callbackData("ai_pairs").build();
        var strategy   = InlineKeyboardButton.builder().text("üß† –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ AI").callbackData("ai_strategy").build();
        var risk       = InlineKeyboardButton.builder().text("‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏").callbackData("ai_risk").build();
        var scan       = InlineKeyboardButton.builder().text("‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è").callbackData("ai_scan_interval").build();
        var notify     = InlineKeyboardButton.builder().text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è").callbackData("ai_notify").build();
        var profiles   = InlineKeyboardButton.builder().text("üíæ –ü—Ä–æ—Ñ–∏–ª–∏").callbackData("ai_profiles").build();
        var autoConfig = InlineKeyboardButton.builder().text("‚ú® –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AI").callbackData("ai_autoconfig").build();
        var analytics  = InlineKeyboardButton.builder().text("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞").callbackData("ai_analytics").build();
        var backtest   = InlineKeyboardButton.builder().text("üß™ Backtest").callbackData("ai_backtest").build();
        var positions  = InlineKeyboardButton.builder().text("üóÇ –ü–æ–∑–∏—Ü–∏–∏").callbackData("ai_positions").build();
        var history    = InlineKeyboardButton.builder().text("üìú –ò—Å—Ç–æ—Ä–∏—è").callbackData("ai_history").build();
        var help       = InlineKeyboardButton.builder().text("‚ùì –ü–æ–º–æ—â—å").callbackData("ai_help").build();
        var back       = InlineKeyboardButton.builder().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥").callbackData("start_menu").build();

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        String btnText = enabled ? "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é" : "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é";
        var startStop  = InlineKeyboardButton.builder()
                .text(btnText)
                .callbackData("ai_trade_toggle")
                .build();

        // –°–æ–±–∏—Ä–∞–µ–º —Ä—è–¥—ã
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(toggleAi));
        rows.add(List.of(tradeMode, pairs));
        rows.add(List.of(strategy, risk));
        rows.add(List.of(scan, notify));
        rows.add(List.of(profiles, autoConfig));
        rows.add(List.of(analytics, backtest));
        rows.add(List.of(positions, history));
        rows.add(List.of(startStop)); // –≤—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞—à —Ä—è–¥
        rows.add(List.of(help));
        rows.add(List.of(back));

        return InlineKeyboardMarkup.builder()
                .keyboard(rows)
                .build();
    }
}
