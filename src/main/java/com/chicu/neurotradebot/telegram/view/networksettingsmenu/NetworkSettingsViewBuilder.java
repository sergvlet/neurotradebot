// src/main/java/com/chicu/neurotradebot/view/NetworkSettingsViewBuilder.java
package com.chicu.neurotradebot.telegram.view.networksettingsmenu;

import com.chicu.neurotradebot.entity.ApiCredentials;
import com.chicu.neurotradebot.entity.User;
import com.chicu.neurotradebot.service.ApiCredentialsService;
import com.chicu.neurotradebot.service.AiTradeSettingsService;
import com.chicu.neurotradebot.service.UserService;
import com.chicu.neurotradebot.telegram.BotContext;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.util.List;

@Component
public class NetworkSettingsViewBuilder {
    private final UserService userService;
    private final AiTradeSettingsService settingsService;
    private final ApiCredentialsService credentialsService;

    public NetworkSettingsViewBuilder(UserService userService,
                                      AiTradeSettingsService settingsService,
                                      ApiCredentialsService credentialsService) {
        this.userService = userService;
        this.settingsService = settingsService;
        this.credentialsService = credentialsService;
    }

    public String title() {
        Long chatId = BotContext.getChatId();
        User user = userService.getOrCreate(chatId);
        var settings = settingsService.getOrCreate(user);

        String exch = settings.getExchange() != null ? settings.getExchange() : "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞";
        String mode = settings.isTestMode() ? "TESTNET" : "REAL";

        // –°–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        List<ApiCredentials> creds = credentialsService.listCredentials(
                user, exch, settings.isTestMode()
        );

        String label = creds.stream()
                .filter(ApiCredentials::isActive)
                .map(ApiCredentials::getLabel)
                .findFirst()
                .orElse("‚Äì");

        String status;
        if (creds.isEmpty()) {
            status = "‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π";
        } else {
            try {
                boolean ok = credentialsService.testConnection(user, exch, settings.isTestMode());
                status = ok ? "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ" : "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è";
            } catch (Exception ex) {
                // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –Ω–µ –ø–∞–¥–∞–µ–º
                status = "‚ùå " + ex.getMessage();
            }
        }

        return "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏:\n"
                + "–ë–∏—Ä–∂–∞: " + exch + "\n"
                + "–†–µ–∂–∏–º: "  + mode + "\n"
                + "–ö–ª—é—á: "  + label + "\n"
                + status;
    }

    /**
     * @param fromAi true ‚Äî –ø—Ä–∏—à–ª–∏ –∏–∑ AI-–º–µ–Ω—é; false ‚Äî –∏–∑ Manual-–º–µ–Ω—é
     */
    public InlineKeyboardMarkup markup(Long chatId, boolean fromAi) {
        var settings = settingsService.getOrCreate(userService.getOrCreate(chatId));

        InlineKeyboardButton toggle = InlineKeyboardButton.builder()
                .text(settings.isTestMode() ? "üîµ –¢–µ—Å—Ç–Ω–µ—Ç (‚úì)" : "üü¢ –†–µ–∞–ª (‚úì)")
                .callbackData("toggle_mode")
                .build();

        InlineKeyboardButton exchange = InlineKeyboardButton.builder()
                .text("üåê –í—ã–±—Ä–∞—Ç—å –±–∏—Ä–∂—É")
                .callbackData("select_exchange")
                .build();

        InlineKeyboardButton apiSetup = InlineKeyboardButton.builder()
                .text("üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API-–∫–ª—é—á–∏")
                .callbackData("api_setup_start")
                .build();

        String applyData = fromAi
                ? "apply_network_settings_ai"
                : "apply_network_settings_manual";

        InlineKeyboardButton apply = InlineKeyboardButton.builder()
                .text("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                .callbackData(applyData)
                .build();

        InlineKeyboardButton back = InlineKeyboardButton.builder()
                .text("üîô –û—Ç–º–µ–Ω–∞")
                .callbackData(fromAi ? "ai_control" : "manual_trade_menu")
                .build();

        return InlineKeyboardMarkup.builder()
                .keyboard(List.of(
                        List.of(toggle),
                        List.of(exchange),
                        List.of(apiSetup),
                        List.of(apply),
                        List.of(back)
                ))
                .build();
    }
}
