// src/main/java/com/chicu/neurotradebot/view/ApiSetupMenuBuilder.java
package com.chicu.neurotradebot.telegram.view;

import com.chicu.neurotradebot.entity.User;
import com.chicu.neurotradebot.service.ApiCredentialsService;
import com.chicu.neurotradebot.service.AiTradeSettingsService;
import com.chicu.neurotradebot.service.UserService;
import com.chicu.neurotradebot.telegram.BotContext;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

@Component
public class ApiSetupMenuBuilder {

    private final UserService userService;
    private final AiTradeSettingsService settingsService;
    private final ApiCredentialsService credentialsService;

    public ApiSetupMenuBuilder(UserService userService,
                               AiTradeSettingsService settingsService,
                               ApiCredentialsService credentialsService) {
        this.userService = userService;
        this.settingsService = settingsService;
        this.credentialsService = credentialsService;
    }

    /**
     * –ó–∞–≥–æ–ª–æ–≤–æ–∫: –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º ¬´–ó–∞–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?¬ª,
     * –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π KEY.
     */
    public String title() {
        Long chatId = BotContext.getChatId();
        User user = userService.getOrCreate(chatId);
        var cfg = settingsService.getOrCreate(user);
        boolean hasKey = !credentialsService
            .listCredentials(user, cfg.getExchange(), cfg.isTestMode())
            .isEmpty();

        return hasKey
            ? "üîë API-–∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å?"
            : "üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API-Key:";
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–π ‚Äî –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–í–≤–µ—Å—Ç–∏ Key¬ª,
     * –∏–Ω–∞—á–µ ‚Äî –¥–≤–µ –∫–Ω–æ–ø–∫–∏ ¬´–ó–∞–º–µ–Ω–∏—Ç—å¬ª –∏ ¬´–û—Å—Ç–∞–≤–∏—Ç—å¬ª.
     */
    public InlineKeyboardMarkup markup() {
        Long chatId = BotContext.getChatId();
        User user = userService.getOrCreate(chatId);
        var cfg = settingsService.getOrCreate(user);

        boolean hasKey = !credentialsService
            .listCredentials(user, cfg.getExchange(), cfg.isTestMode())
            .isEmpty();

        if (!hasKey) {
            // –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ API Key
            return InlineKeyboardMarkup.builder()
                .keyboard(List.of(
                    List.of(
                        InlineKeyboardButton.builder()
                            .text("üñä –í–≤–µ—Å—Ç–∏ Key")
                            .callbackData("enter_api_key")
                            .build()
                    )
                ))
                .build();
        }

        // –ï—Å–ª–∏ –∫–ª—é—á–∏ –µ—Å—Ç—å ‚Äî –¥–≤–µ –∫–Ω–æ–ø–∫–∏
        return InlineKeyboardMarkup.builder()
            .keyboard(List.of(
                List.of(
                    InlineKeyboardButton.builder()
                        .text("‚ôªÔ∏è –ó–∞–º–µ–Ω–∏—Ç—å")
                        .callbackData("replace_api_key")
                        .build()
                ),
                List.of(
                    InlineKeyboardButton.builder()
                        .text("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å")
                        .callbackData("keep_api_key")
                        .build()
                )
            ))
            .build();
    }
}
