package com.chicu.neurotradebot.trade.service;

import com.chicu.neurotradebot.trade.model.ActiveTrade;
import com.chicu.neurotradebot.trade.enums.Signal;
import com.chicu.neurotradebot.trade.repository.ActiveTradeRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.time.ZonedDateTime;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ActiveTradeService {

    private final ActiveTradeRepository repository;
    private final ClosedTradeService closedTradeService;
    private final TradeLogService tradeLogService;
    private final TelegramNotificationService notificationService;

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –æ—Ç–∫—Ä—ã—Ç—É—é —Å–¥–µ–ª–∫—É
     */
    public void save(Long chatId, String symbol, String amount, String usdtAmount,
                     String strategy, String mode, double openPrice) {
        ActiveTrade trade = new ActiveTrade();
        trade.setChatId(chatId);
        trade.setSymbol(symbol);
        trade.setStrategy(strategy);
        trade.setMode(mode);
        trade.setAmount(amount);
        trade.setUsdtAmount(usdtAmount);
        trade.setOpenPrice(openPrice);
        trade.setOpenTime(ZonedDateTime.now());

        repository.save(trade);

        tradeLogService.log(chatId, symbol, strategy, Signal.BUY.name(), mode,
                "üíº –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —Ü–µ–Ω–µ " + openPrice + " –Ω–∞ —Å—É–º–º—É " + usdtAmount);
        notificationService.notify(chatId, "‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞: " + symbol + " (" + strategy + ")");
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ ‚Äî —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ ClosedTrade
     */
    public void close(Long chatId, String symbol, double closePrice) {
        Optional<ActiveTrade> optional = repository.findByChatIdAndSymbol(chatId, symbol);
        if (optional.isEmpty()) return;

        ActiveTrade activeTrade = optional.get();

        var closed = closedTradeService.saveClosedTrade(activeTrade, closePrice);
        repository.delete(activeTrade);

        tradeLogService.log(chatId, symbol, activeTrade.getStrategy(), Signal.SELL.name(),
                activeTrade.getMode(), "üí∞ –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞. –ü—Ä–∏–±—ã–ª—å: " + closed.getProfit());
        notificationService.notify(chatId, "üí∞ –°–¥–µ–ª–∫–∞ –ø–æ " + symbol + " –∑–∞–∫—Ä—ã—Ç–∞. –ü—Ä–∏–±—ã–ª—å: " + closed.getProfit());
    }

    public Optional<ActiveTrade> getBySymbol(Long chatId, String symbol) {
        return repository.findByChatIdAndSymbol(chatId, symbol);
    }

    public boolean exists(Long chatId, String symbol) {
        return repository.findByChatIdAndSymbol(chatId, symbol).isPresent();
    }

    public void remove(ActiveTrade trade) {
        repository.delete(trade);
    }
}
