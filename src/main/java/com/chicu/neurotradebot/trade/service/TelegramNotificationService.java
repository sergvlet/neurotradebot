package com.chicu.neurotradebot.trade.service;

import com.chicu.neurotradebot.telegram.util.MessageUtils;
import com.chicu.neurotradebot.trade.enums.Signal;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.bots.AbsSender;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
@RequiredArgsConstructor
public class TelegramNotificationService {

    private final MessageUtils messageUtils;

    // –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è AbsSender –ø–æ chatId
    private final Map<Long, AbsSender> senderCache = new ConcurrentHashMap<>();

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç AbsSender –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void registerSender(Long chatId, AbsSender sender) {
        senderCache.put(chatId, sender);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    public void notify(Long chatId, String message) {
        AbsSender sender = senderCache.get(chatId);
        if (sender != null) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ sender –Ω–∞–π–¥–µ–Ω
            messageUtils.sendMessage(chatId, message, sender);
        } else {
            // –ï—Å–ª–∏ sender –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
            System.out.println("AbsSender –¥–ª—è chatId " + chatId + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ
     */
    public void sendTradeNotification(Long chatId, Signal signal) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–≥–Ω–∞–ª–∞
        String text = switch (signal) {
            case BUY -> "üü¢ –°–∏–≥–Ω–∞–ª: –ü–û–ö–£–ü–ö–ê";
            case SELL -> "üî¥ –°–∏–≥–Ω–∞–ª: –ü–†–û–î–ê–ñ–ê";
            case HOLD -> "‚ö™Ô∏è –°–∏–≥–Ω–∞–ª: –î–ï–†–ñ–ê–¢–¨";
        };

        // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ notify –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        notify(chatId, text);
    }
}
