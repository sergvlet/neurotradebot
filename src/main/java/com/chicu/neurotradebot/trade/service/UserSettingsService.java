package com.chicu.neurotradebot.trade.service;

import com.chicu.neurotradebot.ai.strategy.AvailableStrategy;
import com.chicu.neurotradebot.trade.enums.Exchange;
import com.chicu.neurotradebot.trade.enums.TradeMode;
import com.chicu.neurotradebot.trade.enums.TradeType;
import com.chicu.neurotradebot.trade.model.UserSettings;
import com.chicu.neurotradebot.trade.repository.UserSettingsRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
@RequiredArgsConstructor
public class UserSettingsService {

    private final UserSettingsRepository repository;

    // ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (—Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è)
    private final Map<Long, String> waitingInputs = new HashMap<>();

    // üíæ –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, API Key –ø–µ—Ä–µ–¥ Secret Key)
    private final Map<Long, Map<String, String>> tempData = new HashMap<>();

    // üìå –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public UserSettings getOrCreate(Long chatId) {
        return repository.findByChatId(chatId)
                .orElseGet(() -> {
                    UserSettings settings = new UserSettings();
                    settings.setChatId(chatId);
                    settings.setStrategies(new HashSet<>());
                    settings.setTradeType(TradeType.AI);  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é AI —Ç–æ—Ä–≥–æ–≤–ª—è
                    return repository.save(settings);
                });
    }

    // üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    public void toggleStrategy(Long chatId, AvailableStrategy strategy) {
        UserSettings settings = getOrCreate(chatId);
        Set<AvailableStrategy> strategies = settings.getStrategies();

        if (strategies.contains(strategy)) {
            strategies.remove(strategy);
        } else {
            strategies.add(strategy);
        }

        settings.setStrategies(strategies);
        repository.save(settings);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è AI
    public Set<AvailableStrategy> getSelectedStrategies(Long chatId) {
        return getOrCreate(chatId).getStrategies();
    }

    // üíº –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
    public void setTradeMode(Long chatId, TradeMode mode) {
        UserSettings settings = getOrCreate(chatId);
        settings.setTradeMode(mode);
        repository.save(settings);
    }

    public TradeMode getTradeMode(Long chatId) {
        return getOrCreate(chatId).getTradeMode();
    }

    // ‚å®Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    public void setWaitingForInput(Long chatId, String inputType) {
        waitingInputs.put(chatId, inputType);
    }

    public String getWaitingFor(Long chatId) {
        return waitingInputs.get(chatId);
    }

    public boolean isWaitingFor(Long chatId, String inputType) {
        return inputType.equals(waitingInputs.get(chatId));
    }

    public void clearWaiting(Long chatId) {
        waitingInputs.remove(chatId);
    }

    // üíæ –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    public void setTemp(Long chatId, String key, String value) {
        tempData.computeIfAbsent(chatId, k -> new HashMap<>()).put(key, value);
    }

    public String getTemp(Long chatId, String key) {
        return tempData.getOrDefault(chatId, new HashMap<>()).get(key);
    }

    public void clearTemp(Long chatId, String key) {
        Map<String, String> userTemp = tempData.get(chatId);
        if (userTemp != null) {
            userTemp.remove(key);
        }
    }

    // üíµ –õ–∏–º–∏—Ç
    public void setTradeLimit(Long chatId, Double limit) {
        UserSettings settings = getOrCreate(chatId);
        settings.setTradeLimit(String.valueOf(limit));
        repository.save(settings);
    }

    // üìä –°–∏–º–≤–æ–ª
    public void setExchangeSymbol(Long chatId, String symbol) {
        UserSettings settings = getOrCreate(chatId);
        settings.setExchangeSymbol(symbol);
        repository.save(settings);
    }

    // ‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º
    public void setTimeframe(Long chatId, String tf) {
        UserSettings settings = getOrCreate(chatId);
        settings.setTimeframe(tf);
        repository.save(settings);
    }

    // üìà –ë–∏—Ä–∂–∞
    public void setExchange(Long chatId, Exchange exchange) {
        UserSettings settings = getOrCreate(chatId);
        settings.setExchange(exchange);
        repository.save(settings);
    }

    public void setTradeType(Long chatId, TradeType type) {
        UserSettings settings = getOrCreate(chatId);
        settings.setTradeType(type);
        repository.save(settings);
    }

    public TradeType getTradeType(Long chatId) {
        return getOrCreate(chatId).getTradeType();
    }

    // üí° –†—É—á–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    public void setSelectedManualStrategy(Long chatId, AvailableStrategy strategy) {
        UserSettings settings = getOrCreate(chatId);
        settings.setSelectedManualStrategy(strategy);
        repository.save(settings);
    }

    public AvailableStrategy getSelectedManualStrategy(Long chatId) {
        return getOrCreate(chatId).getSelectedManualStrategy();
    }
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public void save(UserSettings userSettings) {
        repository.save(userSettings);
    }

}
