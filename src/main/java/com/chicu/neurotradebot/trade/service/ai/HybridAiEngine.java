package com.chicu.neurotradebot.trade.service.ai;

import com.chicu.neurotradebot.ai.StrategyEngine;
import com.chicu.neurotradebot.ai.strategy.AvailableStrategy;
import com.chicu.neurotradebot.binance.OrderService;
import com.chicu.neurotradebot.trade.enums.Signal;
import com.chicu.neurotradebot.trade.model.MarketCandle;
import com.chicu.neurotradebot.trade.service.MarketStreamService;
import com.chicu.neurotradebot.trade.service.TelegramNotificationService;
import com.chicu.neurotradebot.trade.service.TradingStatusService;
import com.chicu.neurotradebot.trade.service.UserSettingsService;
import com.chicu.neurotradebot.trade.model.UserSettings;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class HybridAiEngine {

    private final MarketStreamService marketStreamService;
    private final StrategyEngine strategyEngine;
    private final UserSettingsService userSettingsService;
    private final OrderService orderService;
    private final TelegramNotificationService notificationService;
    private final TradingStatusService tradingStatusService;

    public void runForUser(Long chatId) {
        UserSettings settings = userSettingsService.getOrCreate(chatId);
        String symbol = settings.getExchangeSymbol();
        String interval = settings.getTimeframe();

        log.info("‚ñ∂Ô∏è AI-—Ç–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è chatId={} | symbol={} | interval={}", chatId, symbol, interval);

        marketStreamService.subscribeToCandles(symbol, interval, (MarketCandle candle) -> {
            if (!tradingStatusService.isTradingEnabled(chatId)) {
                log.info("‚õîÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü—Ä–æ–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞.");
                return;
            }

            Map<AvailableStrategy, Signal> signals = strategyEngine.analyzeAll(chatId, symbol, interval);
            Signal decision = combine(signals);

            log.info("üìä –°–∏–≥–Ω–∞–ª—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {}", signals);
            log.info("‚öôÔ∏è –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {}", decision);

            switch (decision) {
                case BUY -> {
                    double qty = 1.0; // –ü—Ä–∏–º–µ—Ä: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
                    boolean useRealKeys = true; // –ò–ª–∏ false –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π
                    orderService.placeBuyOrder(chatId, symbol, qty, useRealKeys);
                    notificationService.sendTradeNotification(chatId, Signal.BUY); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
                }
                case SELL -> {
                    double qty = 1.0; // –ü—Ä–∏–º–µ—Ä: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                    boolean useRealKeys = true; // –ò–ª–∏ false –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π
                    orderService.placeSellOrder(chatId, symbol, qty, useRealKeys);
                    notificationService.sendTradeNotification(chatId, Signal.SELL); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ
                }
                case HOLD -> {
                    log.info("‚è∏ HOLD ‚Äî —Ä—ã–Ω–æ–∫ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–∞.");
                    notificationService.sendTradeNotification(chatId, Signal.HOLD); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–µ—Ä–∂–∞–Ω–∏–∏
                }
            }
        });
    }

    private Signal combine(Map<AvailableStrategy, Signal> signals) {
        long buy = signals.values().stream().filter(s -> s == Signal.BUY).count();
        long sell = signals.values().stream().filter(s -> s == Signal.SELL).count();

        if (buy > sell) return Signal.BUY;
        if (sell > buy) return Signal.SELL;
        return Signal.HOLD;
    }
}
