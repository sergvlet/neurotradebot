package com.chicu.neurotradebot.strategy;

import com.chicu.neurotradebot.service.StrategySettingsService;
import com.chicu.neurotradebot.session.InputStage;
import com.chicu.neurotradebot.session.UserSessionManager;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

@Component
@RequiredArgsConstructor
public class RsiEmaStrategyMenuHandler {

    private final StrategySettingsService strategySettingsService;

    public Object showStrategyOptions(Update update) {
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();

        RsiEmaStrategy strategy = strategySettingsService.loadStrategy(chatId);

        String message = """
                üéØ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è: RSI + EMA*

                üßÆ *–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
                ‚Ä¢ EMA –∫–æ—Ä–æ—Ç–∫–∞—è: `%d`
                ‚Ä¢ EMA –¥–ª–∏–Ω–Ω–∞—è: `%d`
                ‚Ä¢ RSI –ø–µ—Ä–∏–æ–¥: `%d`
                ‚Ä¢ RSI BUY < `%.1f`
                ‚Ä¢ RSI SELL > `%.1f`
                ‚Ä¢ –°–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: `%d`

                –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                """.formatted(
                strategy.getEmaShort(),
                strategy.getEmaLong(),
                strategy.getRsiPeriod(),
                strategy.getRsiBuyThreshold(),
                strategy.getRsiSellThreshold(),
                strategy.getMinCandles()
        );

        return EditMessageText.builder()
                .chatId(String.valueOf(chatId))
                .messageId(messageId)
                .text(message)
                .replyMarkup(buildStrategyMenu())
                .parseMode("Markdown")
                .build();
    }

    public Object resetToDefault(Update update) {
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();

        strategySettingsService.resetToDefault(chatId);

        return EditMessageText.builder()
                .chatId(String.valueOf(chatId))
                .messageId(messageId)
                .text("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ *RSI + EMA* —Å–±—Ä–æ—à–µ–Ω—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ.")
                .replyMarkup(buildStrategyMenu())
                .parseMode("Markdown")
                .build();
    }

    public Object handleCallback(Update update) {
        String data = update.getCallbackQuery().getData();
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();

        return switch (data) {
            case "ai_strategy_settings" ->
                    buildEditStage(update, InputStage.AI_STRATEGY_MENU, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", buildParameterEditMenu());

            case "ai_set_rsi_period" ->
                    setInputStage(update, InputStage.AI_STRATEGY_SET_RSI_PERIOD, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI –ø–µ—Ä–∏–æ–¥–∞:");
            case "ai_set_ema_short" ->
                    setInputStage(update, InputStage.AI_STRATEGY_SET_EMA_SHORT, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA SHORT:");
            case "ai_set_ema_long" ->
                    setInputStage(update, InputStage.AI_STRATEGY_SET_EMA_LONG, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA LONG:");
            case "ai_set_rsi_buy" ->
                    setInputStage(update, InputStage.AI_STRATEGY_SET_RSI_BUY, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ RSI –¥–ª—è –ø–æ–∫—É–ø–∫–∏:");
            case "ai_set_rsi_sell" ->
                    setInputStage(update, InputStage.AI_STRATEGY_SET_RSI_SELL, "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ RSI –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:");
            case "ai_set_limit" ->
                    setInputStage(update, InputStage.AI_STRATEGY_SET_LIMIT, "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π:");

            default -> null;
        };
    }

    public Object handleText(Update update) {
        Message message = update.getMessage();
        long chatId = message.getChatId();
        String text = message.getText().trim();

        InputStage stage = UserSessionManager.getInputStage(chatId);
        RsiEmaStrategy strategy = strategySettingsService.loadStrategy(chatId);

        try {
            switch (stage) {
                case AI_STRATEGY_SET_RSI_PERIOD -> strategy.setRsiPeriod(Integer.parseInt(text));
                case AI_STRATEGY_SET_EMA_SHORT -> strategy.setEmaShort(Integer.parseInt(text));
                case AI_STRATEGY_SET_EMA_LONG -> strategy.setEmaLong(Integer.parseInt(text));
                case AI_STRATEGY_SET_RSI_BUY -> strategy.setRsiBuyThreshold(Double.parseDouble(text));
                case AI_STRATEGY_SET_RSI_SELL -> strategy.setRsiSellThreshold(Double.parseDouble(text));
                case AI_STRATEGY_SET_LIMIT -> strategy.setMinCandles(Integer.parseInt(text));
                default -> {
                    return null;
                }
            }
        } catch (NumberFormatException e) {
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.";
        }

        strategySettingsService.saveStrategy(chatId, strategy);
        UserSessionManager.setInputStage(chatId, InputStage.NONE);
        return showStrategyOptionsFromText(chatId, message.getMessageId());
    }

    private Object showStrategyOptionsFromText(long chatId, int messageId) {
        RsiEmaStrategy strategy = strategySettingsService.loadStrategy(chatId);

        String message = """
                üéØ *–°—Ç—Ä–∞—Ç–µ–≥–∏—è: RSI + EMA –æ–±–Ω–æ–≤–ª–µ–Ω–∞*

                ‚Ä¢ EMA –∫–æ—Ä–æ—Ç–∫–∞—è: `%d`
                ‚Ä¢ EMA –¥–ª–∏–Ω–Ω–∞—è: `%d`
                ‚Ä¢ RSI –ø–µ—Ä–∏–æ–¥: `%d`
                ‚Ä¢ RSI BUY < `%.1f`
                ‚Ä¢ RSI SELL > `%.1f`
                ‚Ä¢ –°–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: `%d`

                –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                """.formatted(
                strategy.getEmaShort(),
                strategy.getEmaLong(),
                strategy.getRsiPeriod(),
                strategy.getRsiBuyThreshold(),
                strategy.getRsiSellThreshold(),
                strategy.getMinCandles()
        );

        return EditMessageText.builder()
                .chatId(String.valueOf(chatId))
                .messageId(messageId)
                .text(message)
                .replyMarkup(buildStrategyMenu())
                .parseMode("Markdown")
                .build();
    }

    private Object setInputStage(Update update, InputStage stage, String prompt) {
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();
        UserSessionManager.setInputStage(chatId, stage);

        return EditMessageText.builder()
                .chatId(String.valueOf(chatId))
                .messageId(messageId)
                .text("‚úèÔ∏è " + prompt)
                .parseMode("Markdown")
                .build();
    }

    private Object buildEditStage(Update update, InputStage stage, String text, InlineKeyboardMarkup markup) {
        long chatId = update.getCallbackQuery().getMessage().getChatId();
        int messageId = update.getCallbackQuery().getMessage().getMessageId();
        UserSessionManager.setInputStage(chatId, stage);

        return EditMessageText.builder()
                .chatId(String.valueOf(chatId))
                .messageId(messageId)
                .text(text)
                .replyMarkup(markup)
                .parseMode("Markdown")
                .build();
    }

    private InlineKeyboardMarkup buildStrategyMenu() {
        return InlineKeyboardMarkup.builder()
                .keyboard(List.of(
                        List.of(button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", "ai_strategy_settings")),
                        List.of(button("üßπ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞ –¥–µ—Ñ–æ–ª—Ç", "ai_strategy_reset")),
                        List.of(button("üîô –ù–∞–∑–∞–¥", "ai_back_main"))
                ))
                .build();
    }

    private InlineKeyboardMarkup buildParameterEditMenu() {
        return InlineKeyboardMarkup.builder()
                .keyboard(List.of(
                        List.of(button("üìè RSI –ø–µ—Ä–∏–æ–¥", "ai_set_rsi_period")),
                        List.of(button("üìâ RSI BUY < –∑–Ω–∞—á–µ–Ω–∏–µ", "ai_set_rsi_buy")),
                        List.of(button("üìà RSI SELL > –∑–Ω–∞—á–µ–Ω–∏–µ", "ai_set_rsi_sell")),
                        List.of(button("üíπ EMA SHORT", "ai_set_ema_short")),
                        List.of(button("üìä EMA LONG", "ai_set_ema_long")),
                        List.of(button("üß± –ú–∏–Ω. —Å–≤–µ—á–µ–π", "ai_set_limit")),
                        List.of(button("üîô –ù–∞–∑–∞–¥", "ai_strategy_main"))
                ))
                .build();
    }

    private InlineKeyboardButton button(String text, String callbackData) {
        return InlineKeyboardButton.builder()
                .text(text)
                .callbackData(callbackData)
                .build();
    }
}
