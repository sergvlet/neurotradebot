package com.chicu.neurotradebot.ai.strategy.impl;

import com.chicu.neurotradebot.ai.strategy.AiStrategy;
import com.chicu.neurotradebot.ai.strategy.config.AdxConfig;
import com.chicu.neurotradebot.trade.enums.Signal;
import com.chicu.neurotradebot.trade.model.MarketCandle;
import com.chicu.neurotradebot.trade.service.MarketCandleService;
import com.chicu.neurotradebot.trade.service.OrderService;
import com.chicu.neurotradebot.trade.service.TelegramNotificationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.ta4j.core.BarSeries;
import org.ta4j.core.indicators.adx.ADXIndicator;

import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class AdxStrategy implements AiStrategy {

    private final MarketCandleService candleService;
    private final OrderService orderService; // –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤
    private final TelegramNotificationService notificationService; // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private AdxConfig config = new AdxConfig(); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    @Override
    public String getName() {
        return "ADX";
    }

    @Override
    public Signal analyze(List<MarketCandle> candles) {
        if (candles.size() < config.getPeriod() + 1) {
            log.warn("üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ADX (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {} –±–∞—Ä–æ–≤)", config.getPeriod() + 1);
            return Signal.HOLD;  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HOLD
        }

        BarSeries series = candleService.buildBarSeries(candles);
        ADXIndicator adx = new ADXIndicator(series, config.getPeriod());

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ADX
        double value = adx.getValue(series.getEndIndex()).doubleValue();

        log.info("üìä ADX: value={}, threshold={}", value, config.getTrendStrengthThreshold());

        // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: –µ—Å–ª–∏ ADX –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞, —Ç–æ —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
        return value > config.getTrendStrengthThreshold() ? Signal.BUY : Signal.HOLD;
    }

    @Override
    public void setConfig(Object config) {
        if (config instanceof AdxConfig) {
            this.config = (AdxConfig) config;
        } else {
            log.warn("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ADX: {}", config);
        }
    }

    @Override
    public void execute() {
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        log.info("–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ADX...");

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 —Å–≤–µ—á–µ–π)
        List<MarketCandle> latestCandles = candleService.getLatestCandles("BTCUSDT", "1h", 100);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        Signal decision = analyze(latestCandles);

        // –†–µ–∞–ª–∏–∑—É–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–≥–Ω–∞–ª–∞
        if (decision == Signal.BUY) {
            log.info("üí° –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...");
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ OrderService –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä
            // orderService.placeBuyOrder(chatId, "BTCUSDT", qty, true);
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // notificationService.sendTradeNotification(chatId, Signal.BUY);
        } else {
            log.info("‚ö™Ô∏è –°–∏–≥–Ω–∞–ª –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ. –°–¥–µ–ª–∫–∞ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞.");
        }
    }
}
