package com.chicu.neurotradebot.ai.strategy.impl;

import com.chicu.neurotradebot.ai.strategy.AiStrategy;
import com.chicu.neurotradebot.ai.strategy.config.BollingerBandsConfig;
import com.chicu.neurotradebot.trade.model.MarketCandle;
import com.chicu.neurotradebot.trade.enums.Signal;
import com.chicu.neurotradebot.trade.service.MarketCandleService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.ta4j.core.BarSeries;
import org.ta4j.core.indicators.SMAIndicator;
import org.ta4j.core.indicators.bollinger.BollingerBandsLowerIndicator;
import org.ta4j.core.indicators.bollinger.BollingerBandsMiddleIndicator;
import org.ta4j.core.indicators.bollinger.BollingerBandsUpperIndicator;
import org.ta4j.core.indicators.helpers.ClosePriceIndicator;
import org.ta4j.core.indicators.statistics.StandardDeviationIndicator;
import org.ta4j.core.num.Num;

import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class BollingerBandsStrategy implements AiStrategy {

    private final MarketCandleService candleService;
    private BollingerBandsConfig config = new BollingerBandsConfig(); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    @Override
    public String getName() {
        return "Bollinger Bands";
    }

    @Override
    public Signal analyze(List<MarketCandle> candles) {
        if (candles.size() < config.getPeriod()) {
            log.warn("üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Bollinger Bands (–Ω–µ–æ–±—Ö–æ–¥–∏–º –ø–µ—Ä–∏–æ–¥: {})", config.getPeriod());
            return Signal.HOLD;  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HOLD
        }

        // –°—Ç—Ä–æ–∏–º —Å–µ—Ä–∏—é –±–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        BarSeries series = candleService.buildBarSeries(candles);
        ClosePriceIndicator closePrice = new ClosePriceIndicator(series);
        SMAIndicator sma = new SMAIndicator(closePrice, config.getPeriod());
        StandardDeviationIndicator stdDev = new StandardDeviationIndicator(closePrice, config.getPeriod());

        // –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è, –≤–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –ø–æ–ª–æ—Å—ã Bollinger Bands
        BollingerBandsMiddleIndicator middleBand = new BollingerBandsMiddleIndicator(sma);
        Num multiplier = series.numOf(config.getMultiplier());
        BollingerBandsUpperIndicator upperBand = new BollingerBandsUpperIndicator(middleBand, stdDev, multiplier);
        BollingerBandsLowerIndicator lowerBand = new BollingerBandsLowerIndicator(middleBand, stdDev, multiplier);

        // –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        int lastIndex = series.getEndIndex();
        Num close = closePrice.getValue(lastIndex);
        Num lower = lowerBand.getValue(lastIndex);
        Num upper = upperBand.getValue(lastIndex);

        log.info("üìä Bollinger Bands: close={}, upper={}, lower={}", close, upper, lower);

        // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: –ø–æ–∫—É–ø–∫–∞, –ø—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ
        if (close.isLessThan(lower)) {
            return Signal.BUY;  // –¶–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
        } else if (close.isGreaterThan(upper)) {
            return Signal.SELL;  // –¶–µ–Ω–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã ‚Äî —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        } else {
            return Signal.HOLD;  // –¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª–æ—Å ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        }
    }

    @Override
    public void setConfig(Object config) {
        if (config instanceof BollingerBandsConfig bollingerConfig) {
            this.config = bollingerConfig;
        } else {
            log.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ BollingerBandsStrategy: {}", config);
        }
    }

    @Override
    public void execute() {
        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        log.info("–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Bollinger Bands...");

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 —Å–≤–µ—á–µ–π)
        List<MarketCandle> latestCandles = candleService.getLatestCandles("BTCUSDT", "1h", 100);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        Signal decision = analyze(latestCandles);

        // –†–µ–∞–ª–∏–∑—É–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–≥–Ω–∞–ª–∞
        if (decision == Signal.BUY) {
            log.info("üí° –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...");
            // –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ OrderService –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä
            // orderService.placeBuyOrder(chatId, "BTCUSDT", qty, true);
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // notificationService.sendTradeNotification(chatId, Signal.BUY);
        } else if (decision == Signal.SELL) {
            log.info("üí° –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É. –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...");
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
            // orderService.placeSellOrder(chatId, "BTCUSDT", qty, true);
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // notificationService.sendTradeNotification(chatId, Signal.SELL);
        } else {
            log.info("‚ö™Ô∏è –°–∏–≥–Ω–∞–ª –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ. –°–¥–µ–ª–∫–∞ –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–∞.");
        }
    }
}
