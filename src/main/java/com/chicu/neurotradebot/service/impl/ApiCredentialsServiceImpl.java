package com.chicu.neurotradebot.service.impl;

import com.binance.connector.client.exceptions.BinanceClientException;
import com.chicu.neurotradebot.entity.ApiCredentials;
import com.chicu.neurotradebot.entity.AiTradeSettings;
import com.chicu.neurotradebot.entity.User;
import com.chicu.neurotradebot.repository.ApiCredentialsRepository;
import com.chicu.neurotradebot.service.ApiCredentialsService;
import com.chicu.neurotradebot.service.AiTradeSettingsService;
import com.chicu.neurotradebot.trade.service.binance.BinanceClientFactory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API-—É—á—ë—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ApiCredentialsServiceImpl implements ApiCredentialsService {

    private final ApiCredentialsRepository repository;
    private final AiTradeSettingsService settingsService;
    private final BinanceClientFactory clientFactory;

    @Override
    public List<ApiCredentials> listCredentials(User user, String exchange, boolean testMode) {
        AiTradeSettings settings = settingsService.getOrCreate(user);
        String label = exchange + (testMode ? "_testnet" : "_main");
        return repository.findAllBySettings(settings).stream()
                .filter(c -> label.equals(c.getLabel()))
                .toList();
    }

    @Override
    public boolean hasCredentials(User user, String exchange, boolean testMode) {
        return !listCredentials(user, exchange, testMode).isEmpty();
    }

    @Override
    @Transactional
    public void saveApiKey(User user, String exchange, boolean testMode, String apiKey) {
        AiTradeSettings settings = settingsService.getOrCreate(user);
        String label = exchange + (testMode ? "_testnet" : "_main");
        ApiCredentials creds = repository.findBySettingsAndLabel(settings, label)
                .orElseGet(() -> {
                    ApiCredentials c = new ApiCredentials();
                    c.setUser(user);
                    c.setSettings(settings);
                    c.setLabel(label);
                    return c;
                });
        creds.setApiKey(apiKey);
        creds.setApiSecret("PENDING");
        creds.setActive(false);
        repository.save(creds);
        log.info("üîë –°–æ—Ö—Ä–∞–Ω—ë–Ω API Key (label={}) –¥–ª—è user={} exchange={} mode={}",
                label, user.getTelegramUserId(), testMode ? "TESTNET" : "REAL");
    }

    @Override
    @Transactional
    public void saveApiSecret(User user, String exchange, boolean testMode, String apiSecret) {
        AiTradeSettings settings = settingsService.getOrCreate(user);
        String label = exchange + (testMode ? "_testnet" : "_main");
        ApiCredentials creds = repository.findBySettingsAndLabel(settings, label)
                .orElseThrow(() -> new IllegalStateException("–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ API Key"));
        creds.setApiSecret(apiSecret);
        creds.setActive(true);
        repository.save(creds);
        log.info("üîí –°–æ—Ö—Ä–∞–Ω—ë–Ω API Secret (label={}) –¥–ª—è user={} exchange={} mode={}",
                label, user.getTelegramUserId(), testMode ? "TESTNET" : "REAL");
    }

    @Override
    @Transactional
    public void selectCredential(User user, String exchange, boolean testMode, String label) {
        AiTradeSettings settings = settingsService.getOrCreate(user);
        List<ApiCredentials> credsList = repository.findAllBySettings(settings);
        credsList.forEach(c -> c.setActive(label.equals(c.getLabel())));
        repository.saveAll(credsList);
        log.info("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∫—Ä–µ–¥—ã '{}' –¥–ª—è user={} exchange={} mode={}",
                label, user.getTelegramUserId(), testMode ? "TESTNET" : "REAL");
    }

    @Override
    public ApiCredentials getSelectedCredential(User user, String exchange, boolean testMode) {
        AiTradeSettings settings = settingsService.getOrCreate(user);
        String label = exchange + (testMode ? "_testnet" : "_main");
        return repository.findBySettingsAndLabel(settings, label)
                .filter(ApiCredentials::isActive)
                .orElseThrow(() -> new IllegalStateException(
                        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö API-–∫–ª—é—á–µ–π –¥–ª—è user=" + user.getTelegramUserId()));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π —á–µ—Ä–µ–∑ Binance API: –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å accountInfo.
     * - –ü—Ä–∏ HTTP 2xx –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true.
     * - –ü—Ä–∏ HTTP 4xx (–Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–ª—é—á–∏/–ø–æ–¥–ø–∏—Å—å) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.
     * - –ü—Ä–∏ HTTP 5xx –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö –±—Ä–æ—Å–∞–µ—Ç RuntimeException.
     */
    @Override
    public boolean testConnection(User user, String exchange, boolean testMode) {
        ApiCredentials creds = getSelectedCredential(user, exchange, testMode);

        // –°—Ä–∞–∑—É –ª–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–∏–µ –∫—Ä–µ–¥—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥:
        log.info("üîë testConnection: userId={} exchange='{}' mode={} ‚Üí using label='{}', apiKey='{}', apiSecret='{}'",
                user.getTelegramUserId(),
                exchange,
                testMode ? "TESTNET" : "REAL",
                creds.getLabel(),
                creds.getApiKey(),
                creds.getApiSecret().replaceAll(".", "*")  // –≤–µ—Å—å secret –∑–≤—ë–∑–¥–æ—á–∫–∞–º–∏
        );

        var client = clientFactory.create(
                creds.getApiKey(),
                creds.getApiSecret(),
                testMode
        );

        try {
            client.getAccountInfo();
            log.info("‚úÖ getAccountInfo OK for mode={}", testMode ? "TESTNET" : "REAL");
            return true;
        } catch (BinanceClientException e) {
            String body = e.getMessage();
            if (body != null && body.contains("\"code\":-1021")) {
                log.warn("‚ö†Ô∏è Timestamp ahead ‚Äî –∫–ª—é—á–∏ —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º–∏");
                return true;
            }
            log.warn("‚ùå –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞ (4xx) ‚Äî –Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–ª—é—á–∏: {}", body);
            return false;
        } catch (Exception ex) {
            log.warn("‚ùå –°–µ—Ç–µ–≤–∞—è/—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–µ–π: {}", ex.getMessage());
            return false;
        }
    }


}