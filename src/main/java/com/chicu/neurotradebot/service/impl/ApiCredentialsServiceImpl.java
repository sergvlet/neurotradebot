package com.chicu.neurotradebot.service.impl;

import com.chicu.neurotradebot.entity.ApiCredentials;
import com.chicu.neurotradebot.entity.User;
import com.chicu.neurotradebot.repository.ApiCredentialsRepository;
import com.chicu.neurotradebot.service.ApiCredentialsService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
@RequiredArgsConstructor
@Slf4j
public class ApiCredentialsServiceImpl implements ApiCredentialsService {

    private final ApiCredentialsRepository repo;

    @Override
    public boolean hasCredentials(User user, String exchange, boolean testMode) {
        return repo.findByUserAndExchangeAndTestMode(user, exchange, testMode).isPresent();
    }

    @Override
    @Transactional
    public void saveApiKey(User user, String exchange, boolean testMode, String apiKey) {
        ApiCredentials creds = repo.findByUserAndExchangeAndTestMode(user, exchange, testMode)
            .orElse(null);

        if (creds == null) {
            creds = new ApiCredentials();
            creds.setUser(user);
            creds.setExchange(exchange);
            creds.setTestMode(testMode);
            creds.setApiKeyEncrypted(encrypt(apiKey));
            creds.setApiSecretEncrypted("PENDING"); // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            log.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π ApiCredentials —Å PENDING —Å–µ–∫—Ä–µ—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} [{}] ({}, test={})",
                    user.getId(), exchange, user.getUsername(), testMode);
        } else {
            creds.setApiKeyEncrypted(encrypt(apiKey));
            log.info("üîÅ –û–±–Ω–æ–≤–ª—ë–Ω API Key –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} [{}] ({}, test={})",
                    user.getId(), exchange, user.getUsername(), testMode);
        }

        repo.save(creds);
    }

    @Override
    @Transactional
    public void saveApiSecret(User user, String exchange, boolean testMode, String apiSecret) {
        ApiCredentials creds = repo.findByUserAndExchangeAndTestMode(user, exchange, testMode)
            .orElseThrow(() -> new IllegalStateException(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å ApiCredentials –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º API Secret. –ü—Ä–æ–≤–µ—Ä—å, –≤—ã–∑—ã–≤–∞–ª—Å—è –ª–∏ saveApiKey."));

        if (creds.getApiKeyEncrypted() == null) {
            throw new IllegalStateException("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω API Key.");
        }

        creds.setApiSecretEncrypted(encrypt(apiSecret));
        repo.save(creds);

        log.info("‚úÖ API Secret —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} [{}] (test={})",
                user.getId(), exchange, testMode);
    }

    @Override
    public ApiCredentials get(User user, String exchange, boolean testMode) {
        return repo.findByUserAndExchangeAndTestMode(user, exchange, testMode)
            .orElseThrow(() -> new IllegalStateException("‚ùå –î–∞–Ω–Ω—ã–µ API –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."));
    }

    private String encrypt(String plain) {
        // TODO: –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        return plain;
    }
}
