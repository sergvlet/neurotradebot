// src/main/java/com/chicu/neurotradebot/service/impl/ApiCredentialsServiceImpl.java
package com.chicu.neurotradebot.service.impl;

import com.chicu.neurotradebot.entity.ApiCredentials;
import com.chicu.neurotradebot.entity.AiTradeSettings;
import com.chicu.neurotradebot.entity.User;
import com.chicu.neurotradebot.repository.ApiCredentialsRepository;
import com.chicu.neurotradebot.service.ApiCredentialsService;
import com.chicu.neurotradebot.service.AiTradeSettingsService;
import com.chicu.neurotradebot.exchange.binance.BinanceClientFactory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API-—É—á—ë—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ApiCredentialsServiceImpl implements ApiCredentialsService {

    private final ApiCredentialsRepository repository;
    private final AiTradeSettingsService settingsService;
    private final BinanceClientFactory clientFactory;

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö API-—É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
     * –±–∏—Ä–∂–∏ –∏ —Ä–µ–∂–∏–º–∞ (real –∏–ª–∏ testnet).
     *
     * @param user      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
     * @param exchange  –∫–æ–¥ –±–∏—Ä–∂–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "binance"
     * @param testMode  true ‚Äî testnet, false ‚Äî real
     * @return —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π ApiCredentials, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É
     */
    @Override
    public List<ApiCredentials> listCredentials(User user, String exchange, boolean testMode) {
        AiTradeSettings settings = settingsService.getOrCreate(user);
        String label = exchange + (testMode ? "_testnet" : "_main");
        return repository.findAllBySettings(settings).stream()
                .filter(c -> label.equals(c.getLabel()))
                .toList();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–∏ –≤–æ–æ–±—â–µ –∫–ª—é—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
     * –±–∏—Ä–∂–∏ –∏ —Ä–µ–∂–∏–º–∞.
     *
     * @param user      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param exchange  –∫–æ–¥ –±–∏—Ä–∂–∏
     * @param testMode  —Ä–µ–∂–∏–º testnet –∏–ª–∏ real
     * @return true, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏ –∫—Ä–µ–¥—ã
     */
    @Override
    public boolean hasCredentials(User user, String exchange, boolean testMode) {
        return !listCredentials(user, exchange, testMode).isEmpty();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç API Key –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –ª–µ–π–±–ª–æ–º –µ—â—ë –Ω–µ—Ç,
     * —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å ApiCredentials. –°–µ–∫—Ä–µ—Ç –ø–æ–º–µ—á–∞–µ—Ç—Å—è "PENDING", –¥–∞–Ω–Ω—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã.
     *
     * @param user      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param exchange  –∫–æ–¥ –±–∏—Ä–∂–∏
     * @param testMode  —Ä–µ–∂–∏–º testnet –∏–ª–∏ real
     * @param apiKey    —Å—Ç—Ä–æ–∫–∞ API Key
     */
    @Override
    @Transactional
    public void saveApiKey(User user, String exchange, boolean testMode, String apiKey) {
        AiTradeSettings settings = settingsService.getOrCreate(user);
        String label = exchange + (testMode ? "_testnet" : "_main");

        ApiCredentials creds = repository.findBySettingsAndLabel(settings, label)
                .orElseGet(() -> {
                    ApiCredentials c = new ApiCredentials();
                    c.setUser(user);
                    c.setSettings(settings);
                    c.setLabel(label);
                    return c;
                });

        creds.setApiKey(apiKey);
        creds.setApiSecret("PENDING");
        creds.setActive(false);
        repository.save(creds);

        log.info("üîë –°–æ—Ö—Ä–∞–Ω—ë–Ω API Key (label={}) –¥–ª—è user={} exchange={} mode={}",
                label, user.getTelegramUserId(), exchange, testMode ? "TESTNET" : "REAL");
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç API Secret –¥–ª—è —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ ApiCredentials, –¥–µ–ª–∞–µ—Ç –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ–π.
     *
     * @param user       –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param exchange   –∫–æ–¥ –±–∏—Ä–∂–∏
     * @param testMode   —Ä–µ–∂–∏–º testnet –∏–ª–∏ real
     * @param apiSecret  —Å—Ç—Ä–æ–∫–∞ API Secret
     */
    @Override
    @Transactional
    public void saveApiSecret(User user, String exchange, boolean testMode, String apiSecret) {
        AiTradeSettings settings = settingsService.getOrCreate(user);
        String label = exchange + (testMode ? "_testnet" : "_main");

        ApiCredentials creds = repository.findBySettingsAndLabel(settings, label)
                .orElseThrow(() -> new IllegalStateException("–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ API Key"));

        creds.setApiSecret(apiSecret);
        creds.setActive(true);
        repository.save(creds);

        log.info("üîí –°–æ—Ö—Ä–∞–Ω—ë–Ω API Secret (label={}) –¥–ª—è user={} exchange={} mode={}",
                label, user.getTelegramUserId(), exchange, testMode ? "TESTNET" : "REAL");
    }

    /**
     * –û—Ç–º–µ—á–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å ApiCredentials –∞–∫—Ç–∏–≤–Ω–æ–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏.
     *
     * @param user      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param exchange  –∫–æ–¥ –±–∏—Ä–∂–∏
     * @param testMode  —Ä–µ–∂–∏–º testnet –∏–ª–∏ real
     * @param label     –ª–µ–π–±–ª –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
     */
    @Override
    @Transactional
    public void selectCredential(User user, String exchange, boolean testMode, String label) {
        AiTradeSettings settings = settingsService.getOrCreate(user);
        List<ApiCredentials> credsList = repository.findAllBySettings(settings);

        credsList.forEach(c -> c.setActive(label.equals(c.getLabel())));
        repository.saveAll(credsList);

        log.info("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∫—Ä–µ–¥—ã '{}' –¥–ª—è user={} exchange={} mode={}",
                label, user.getTelegramUserId(), exchange, testMode ? "TESTNET" : "REAL");
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å ApiCredentials –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
     * –±–∏—Ä–∂–∏ –∏ —Ä–µ–∂–∏–º–∞. –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö, –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
     *
     * @param user      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param exchange  –∫–æ–¥ –±–∏—Ä–∂–∏
     * @param testMode  —Ä–µ–∂–∏–º testnet –∏–ª–∏ real
     * @return –∞–∫—Ç–∏–≤–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å ApiCredentials
     */
    @Override
    public ApiCredentials getSelectedCredential(User user, String exchange, boolean testMode) {
        AiTradeSettings settings = settingsService.getOrCreate(user);
        String label = exchange + (testMode ? "_testnet" : "_main");

        return repository.findBySettingsAndLabel(settings, label)
                .filter(ApiCredentials::isActive)
                .orElseThrow(() -> new IllegalStateException(
                        "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö API-–∫–ª—é—á–µ–π –¥–ª—è user=" + user.getTelegramUserId()));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∏—Ä–∂–µ–π —á–µ—Ä–µ–∑ Binance API: –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å accountInfo.
     *
     * @param user      –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
     * @param exchange  –∫–æ–¥ –±–∏—Ä–∂–∏
     * @param testMode  —Ä–µ–∂–∏–º testnet –∏–ª–∏ real
     * @return true, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ –±—Ä–æ—Å–∞–µ—Ç RuntimeException
     */
    @Override
    public boolean testConnection(User user, String exchange, boolean testMode) {
        ApiCredentials creds = getSelectedCredential(user, exchange, testMode);
        try {
            var client = clientFactory.create(
                    creds.getApiKey(), creds.getApiSecret(), testMode
            );
            client.getAccountInfo();
            return true;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è exchange={} mode={} ‚Äî {}",
                    exchange, testMode ? "TESTNET" : "REAL", e.getMessage());
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∏—Ä–∂–µ", e);
        }
    }
}
